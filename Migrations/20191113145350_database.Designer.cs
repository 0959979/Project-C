// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using zorgapp.Models;

namespace zorgapp.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20191113145350_database")]
    partial class database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("zorgapp.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password");

                    b.Property<string>("UserName");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("zorgapp.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Info");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("zorgapp.Models.Case", b =>
                {
                    b.Property<string>("CaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CaseInfo");

                    b.Property<string>("CaseName");

                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.HasKey("CaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("zorgapp.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("LocalId");

                    b.Property<string>("Password");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("Specialism");

                    b.Property<string>("UserName");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("zorgapp.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<DateTime>("DateEnd");

                    b.Property<DateTime>("DateStart");

                    b.Property<float>("Mg");

                    b.Property<string>("Name");

                    b.Property<int>("PatientId");

                    b.HasKey("MedicineId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("zorgapp.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<bool>("DoctorToPatient");

                    b.Property<string>("Receiver");

                    b.Property<string>("Sender");

                    b.Property<string>("Subject");

                    b.Property<string>("Text");

                    b.HasKey("MessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("zorgapp.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CanSeeMeId");

                    b.Property<int?>("DoctorId");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("ICanSeeId");

                    b.Property<string>("LastName");

                    b.Property<string>("LinkCode");

                    b.Property<string>("LinkUses");

                    b.Property<string>("LocalId");

                    b.Property<string>("Password");

                    b.Property<int>("PhoneNumber");

                    b.Property<string>("UserName");

                    b.HasKey("PatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("zorgapp.Models.PatientsDoctors", b =>
                {
                    b.Property<int>("DoctorId");

                    b.Property<int>("PatientId");

                    b.HasKey("DoctorId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientsDoctorss");
                });

            modelBuilder.Entity("zorgapp.Models.Patient", b =>
                {
                    b.HasOne("zorgapp.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");
                });

            modelBuilder.Entity("zorgapp.Models.PatientsDoctors", b =>
                {
                    b.HasOne("zorgapp.Models.Doctor", "Doctor")
                        .WithMany("PatientsDoctorss")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("zorgapp.Models.Patient", "Patient")
                        .WithMany("PatientsDoctorss")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
